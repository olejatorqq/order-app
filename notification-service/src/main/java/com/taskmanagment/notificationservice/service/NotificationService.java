package com.taskmanagment.notificationservice.service;

import com.taskmanagment.notificationservice.config.RabbitMQConfig;
import com.taskmanagment.notificationservice.dto.NotificationDTO;
import com.taskmanagment.notificationservice.model.Notification;
import com.taskmanagment.notificationservice.model.OrderCreatedEvent;
import com.taskmanagment.notificationservice.repository.NotificationRepository;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class NotificationService {

    private static final Logger logger = LoggerFactory.getLogger(NotificationService.class);
    private final NotificationRepository notificationRepository;
    private final TelegramService telegramService;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     */
    public List<Notification> getAllNotifications() {
        return notificationRepository.findAll();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ ID.
     */
    public Optional<Notification> getNotificationById(Long id) {
        return notificationRepository.findById(id);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ REST API.
     */
    public Notification sendNotification(NotificationDTO notificationDTO) {
        // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Notification notification = Notification.builder()
                .orderId(notificationDTO.getOrderId())
                .userId(notificationDTO.getUserId())
                .message(notificationDTO.getMessage())
                .sentAt(LocalDateTime.now())
                .build();

        Notification savedNotification = notificationRepository.save(notification);
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {}", savedNotification);

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        String telegramMessage = String.format("*üì¶ –ó–∞–∫–∞–∑ #%d*\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:* %d\n*–°–æ–æ–±—â–µ–Ω–∏–µ:* %s",
                savedNotification.getOrderId(),
                savedNotification.getUserId(),
                savedNotification.getMessage());

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        telegramService.sendMessage(telegramMessage);

        return savedNotification;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ RabbitMQ.
     */
    @RabbitListener(queues = RabbitMQConfig.ORDER_QUEUE)
    public void receiveMessage(OrderCreatedEvent event) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {}", event);
        sendOrderCreatedNotification(event);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
     */
    public void sendOrderCreatedNotification(OrderCreatedEvent event) {
        String message = String.format(
                "*üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!*\n" +
                        "*ID –∑–∞–∫–∞–∑–∞:* %d\n" +
                        "*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* %d\n" +
                        "*–¢–æ–≤–∞—Ä:* %s\n" +
                        "*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* %d\n" +
                        "*–¶–µ–Ω–∞:* %.2f\n" +
                        "*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* %s",
                event.getId(),
                event.getUserId(),
                event.getProduct(),
                event.getQuantity(),
                event.getPrice(),
                event.getCreatedAt().toString()
        );

        telegramService.sendMessage(message);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        Notification notification = Notification.builder()
                .orderId(event.getId())
                .userId(event.getUserId())
                .message(message)
                .sentAt(LocalDateTime.now())
                .build();

        notificationRepository.save(notification);
    }
}
